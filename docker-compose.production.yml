x-common-environment: &common-env
  NODE_ENV: production
  LOG_LEVEL: ${LOG_LEVEL:-warn}

x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 60s

x-production-env: &production-env
  # Database Configuration
  POSTGRES_USER: ${POSTGRES_USER}
  POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
  POSTGRES_PASSWORD_URLENC: ${POSTGRES_PASSWORD_URLENC}
  POSTGRES_DB: ${POSTGRES_DB:-ribeirazul}

  # Redis Configuration
  REDIS_PASSWORD: ${REDIS_PASSWORD}
  REDIS_PASSWORD_URLENC: ${REDIS_PASSWORD_URLENC}

  # JWT Configuration
  JWT_SECRET: ${JWT_SECRET}

  # CORS Configuration
  CORS_ORIGIN: ${CORS_ORIGIN:-https://neodras.com}

  # API Configuration
  API_URL: ${API_URL:-https://neodras.com}

  # MinIO Configuration
  MINIO_ROOT_USER: ${MINIO_ROOT_USER}
  MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
  S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
  S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY}
  S3_BUCKET_NAME: ${S3_BUCKET_NAME:-ribeirazul-media}

  # Rate Limiting
  RATE_LIMIT_MAX: ${RATE_LIMIT_MAX:-100}
  RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-1m}

services:
  # ====================================
  # Redis Cache
  # ====================================
  redis:
    image: redis:7-alpine
    container_name: rz_redis_prod
    restart: unless-stopped
    environment:
      <<: *production-env
    command: [
      "redis-server",
      "--requirepass", "${REDIS_PASSWORD}",
      "--maxmemory", "256mb",
      "--maxmemory-policy", "allkeys-lru",
      "--save", "900 1",
      "--save", "300 10",
      "--save", "60 10000"
    ]
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
    networks:
      - backend

  # ====================================
  # Main Database (Consolidated)
  # ====================================
  db:
    image: postgres:16-alpine
    container_name: rz_db_prod
    restart: unless-stopped
    environment:
      <<: *production-env
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.utf8"
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      start_period: 30s
    networks:
      - backend

  # ====================================
  # MinIO Object Storage
  # ====================================
  minio:
    image: quay.io/minio/minio:latest
    container_name: rz_minio_prod
    restart: unless-stopped
    environment:
      <<: *production-env
      MINIO_BROWSER: "on"
      MINIO_PROMETHEUS_AUTH_TYPE: "public"
    command: server /data --console-address ":9001"
    ports:
      - "127.0.0.1:9000:9000"
      - "127.0.0.1:9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
    networks:
      - backend

  # ====================================
  # Auth Service
  # ====================================
  auth:
    build:
      context: ./backend/auth-service
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: rz_auth_prod
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      <<: [*common-env, *production-env]
      PORT: 8084
      HOST: "0.0.0.0"
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD_URLENC}@db:5432/${POSTGRES_DB}?schema=auth
      REDIS_URL: redis://:${REDIS_PASSWORD_URLENC}@redis:6379/0
      API_URL: ${API_URL}
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "curl", "-f", "http://localhost:8084/health"]
    networks:
      - backend
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # ====================================
  # Properties Service
  # ====================================
  properties:
    build:
      context: ./backend/properties-service
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: rz_properties_prod
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      <<: [*common-env, *production-env]
      PORT: 8082
      HOST: "0.0.0.0"
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD_URLENC}@db:5432/${POSTGRES_DB}?schema=properties
      REDIS_URL: redis://:${REDIS_PASSWORD_URLENC}@redis:6379/1
      BASE_URL: ${API_URL}
    volumes:
      - properties_uploads:/app/uploads
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
    networks:
      - backend
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # ====================================
  # Media Service
  # ====================================
  media:
    build:
      context: ./backend/media-service
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: rz_media_prod
    restart: unless-stopped
    depends_on:
      minio:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      <<: [*common-env, *production-env]
      PORT: 8083
      HOST: "0.0.0.0"
      REDIS_URL: redis://:${REDIS_PASSWORD_URLENC}@redis:6379/2
      S3_ENDPOINT: http://minio:9000
      API_URL: ${API_URL}
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
    networks:
      - backend
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # ====================================
  # Settings Service
  # ====================================
  settings:
    build:
      context: ./backend/settings-service
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: rz_settings_prod
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      <<: [*common-env, *production-env]
      PORT: 8085
      HOST: "0.0.0.0"
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD_URLENC}@db:5432/${POSTGRES_DB}?schema=settings
      REDIS_URL: redis://:${REDIS_PASSWORD_URLENC}@redis:6379/3
      API_URL: ${API_URL}
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "curl", "-f", "http://localhost:8085/api/v1/health"]
    networks:
      - backend
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # ====================================
  # Users Service
  # ====================================
  users:
    build:
      context: ./backend/user-service
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: rz_users_prod
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      <<: [*common-env, *production-env]
      PORT: 8086
      HOST: "0.0.0.0"
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD_URLENC}@db:5432/${POSTGRES_DB}?schema=users
      REDIS_URL: redis://:${REDIS_PASSWORD_URLENC}@redis:6379/4
      API_URL: ${API_URL}
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
    networks:
      - backend
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # ====================================
  # API Gateway
  # ====================================
  api-gateway:
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile
      args:
        NODE_ENV: production
    container_name: rz_api_gateway_prod
    restart: unless-stopped
    depends_on:
      auth:
        condition: service_healthy
      properties:
        condition: service_healthy
      media:
        condition: service_healthy
      settings:
        condition: service_healthy
      users:
        condition: service_healthy
    environment:
      <<: [*common-env, *production-env]
      PORT: 8081
      HOST: "0.0.0.0"
      # Service URLs
      AUTH_SERVICE_URL: http://auth:8084
      PROPERTIES_SERVICE_URL: http://properties:8082
      MEDIA_SERVICE_URL: http://media:8083
      SETTINGS_SERVICE_URL: http://settings:8085
      USERS_SERVICE_URL: http://users:8086
      # Timeouts
      AUTH_SERVICE_TIMEOUT: 15000
      PROPERTIES_SERVICE_TIMEOUT: 15000
      MEDIA_SERVICE_TIMEOUT: 30000
      SETTINGS_SERVICE_TIMEOUT: 10000
      USERS_SERVICE_TIMEOUT: 10000
    ports:
      - "127.0.0.1:8081:8081"
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
    networks:
      - backend
      - frontend
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # ====================================
  # Frontend (Nginx)
  # ====================================
  web:
    build:
      context: ./frontend
      dockerfile: Dockerfile.production
      args:
        VITE_API_URL: ${API_URL}
        NODE_ENV: production
    container_name: rz_web_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./ssl:/etc/letsencrypt:ro
      - ./frontend/nginx-production.conf:/etc/nginx/nginx.conf:ro
      - ./frontend/nginx-site.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      api-gateway:
        condition: service_healthy
    environment:
      <<: *production-env
      SSL_ENABLED: ${SSL_ENABLED:-false}
    healthcheck:
      <<: *healthcheck-defaults
      test: ["CMD", "curl", "-f", "http://localhost/health"]
    networks:
      - frontend
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # ====================================
  # Nginx Reverse Proxy (Optional - for SSL)
  # ====================================
  nginx-proxy:
    image: nginx:alpine
    container_name: rz_nginx_proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/proxy.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/letsencrypt:ro
      - ./nginx/sites:/etc/nginx/sites-enabled:ro
    depends_on:
      - web
      - api-gateway
    networks:
      - frontend
    profiles:
      - with-ssl

networks:
  backend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  frontend:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

volumes:
  db_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  properties_uploads:
    driver: local

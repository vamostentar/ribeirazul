#!/bin/bash

echo "üîç ===== VALIDA√á√ÉO DE CONFIGURA√á√ÉO DE PRODU√á√ÉO ====="
echo ""

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para verificar se uma vari√°vel est√° definida
check_env_var() {
    local var_name=$1
    local var_value=$(grep "^${var_name}=" .env.production 2>/dev/null | cut -d'=' -f2-)
    
    if [ -z "$var_value" ] || [ "$var_value" = "your_secure_password" ] || [ "$var_value" = "your_domain.com" ]; then
        echo -e "${RED}‚ùå $var_name: N√£o configurado ou usando valor padr√£o${NC}"
        return 1
    else
        echo -e "${GREEN}‚úÖ $var_name: Configurado${NC}"
        return 0
    fi
}

# Verificar se arquivo .env.production existe
echo -e "${BLUE}1. Verificando arquivo .env.production...${NC}"
if [ ! -f ".env.production" ]; then
    echo -e "${RED}‚ùå Arquivo .env.production n√£o encontrado!${NC}"
    echo "   Copie .env.production.example para .env.production e configure as vari√°veis"
    exit 1
fi
echo -e "${GREEN}‚úÖ Arquivo .env.production encontrado${NC}"
echo ""

# Verificar vari√°veis cr√≠ticas
echo -e "${BLUE}2. Verificando vari√°veis de ambiente cr√≠ticas...${NC}"
errors=0

# Database
check_env_var "POSTGRES_USER" || ((errors++))
check_env_var "POSTGRES_PASSWORD" || ((errors++))
check_env_var "POSTGRES_PASSWORD_URLENC" || ((errors++))

# Redis
check_env_var "REDIS_PASSWORD" || ((errors++))
check_env_var "REDIS_PASSWORD_URLENC" || ((errors++))

# JWT
check_env_var "JWT_SECRET" || ((errors++))

# Domain/API
check_env_var "API_URL" || ((errors++))
check_env_var "CORS_ORIGIN" || ((errors++))

# MinIO
check_env_var "MINIO_ROOT_USER" || ((errors++))
check_env_var "MINIO_ROOT_PASSWORD" || ((errors++))
check_env_var "S3_ACCESS_KEY_ID" || ((errors++))
check_env_var "S3_SECRET_ACCESS_KEY" || ((errors++))

echo ""

# Verificar se JWT_SECRET tem tamanho adequado
echo -e "${BLUE}3. Verificando seguran√ßa das configura√ß√µes...${NC}"
jwt_secret=$(grep "^JWT_SECRET=" .env.production 2>/dev/null | cut -d'=' -f2-)
if [ ${#jwt_secret} -lt 32 ]; then
    echo -e "${RED}‚ùå JWT_SECRET deve ter pelo menos 32 caracteres${NC}"
    ((errors++))
else
    echo -e "${GREEN}‚úÖ JWT_SECRET tem tamanho adequado (${#jwt_secret} chars)${NC}"
fi

# Verificar se as passwords s√£o diferentes dos valores padr√£o
postgres_pass=$(grep "^POSTGRES_PASSWORD=" .env.production 2>/dev/null | cut -d'=' -f2-)
if [ "$postgres_pass" = "your_secure_postgres_password" ]; then
    echo -e "${RED}‚ùå POSTGRES_PASSWORD ainda est√° usando valor padr√£o${NC}"
    ((errors++))
fi

echo ""

# Verificar docker-compose.production.yml
echo -e "${BLUE}4. Validando docker-compose.production.yml...${NC}"
if docker-compose --env-file .env.production -f docker-compose.production.yml config > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Configura√ß√£o do docker-compose v√°lida${NC}"
else
    echo -e "${RED}‚ùå Configura√ß√£o do docker-compose inv√°lida${NC}"
    echo "   Execute: docker-compose --env-file .env.production -f docker-compose.production.yml config"
    ((errors++))
fi
echo ""

# Verificar se h√° conflitos de porta
echo -e "${BLUE}5. Verificando conflitos de porta...${NC}"
if netstat -tuln 2>/dev/null | grep -q ":80 "; then
    echo -e "${YELLOW}‚ö†Ô∏è  Porta 80 j√° est√° em uso${NC}"
fi
if netstat -tuln 2>/dev/null | grep -q ":443 "; then
    echo -e "${YELLOW}‚ö†Ô∏è  Porta 443 j√° est√° em uso${NC}"
fi
echo -e "${GREEN}‚úÖ Verifica√ß√£o de portas conclu√≠da${NC}"
echo ""

# Verificar se SSL est√° configurado
echo -e "${BLUE}6. Verificando configura√ß√£o SSL...${NC}"
if [ -d "ssl" ] && [ "$(ls -A ssl)" ]; then
    echo -e "${GREEN}‚úÖ Diret√≥rio SSL n√£o est√° vazio${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Diret√≥rio SSL est√° vazio - configure certificados SSL${NC}"
fi
echo ""

# Resumo final
echo -e "${BLUE}7. RESUMO DA VALIDA√á√ÉO${NC}"
if [ $errors -eq 0 ]; then
    echo -e "${GREEN}üéâ TODAS AS CONFIGURA√á√ïES EST√ÉO CORRETAS!${NC}"
    echo -e "${GREEN}‚úÖ Sistema pronto para build de produ√ß√£o${NC}"
    echo ""
    echo -e "${BLUE}Pr√≥ximos passos:${NC}"
    echo "1. Execute: docker-compose -f docker-compose.production.yml build --no-cache"
    echo "2. Execute: docker-compose --env-file .env.production -f docker-compose.production.yml up -d"
    echo "3. Verifique: docker-compose -f docker-compose.production.yml ps"
    exit 0
else
    echo -e "${RED}‚ùå ENCONTRADOS $errors PROBLEMAS DE CONFIGURA√á√ÉO${NC}"
    echo -e "${RED}üõë Corrija os problemas antes de prosseguir com o build${NC}"
    exit 1
fi

services:
  db:
    image: postgres:16-alpine
    container_name: rz_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ribeirazul
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  db_properties:
    image: postgres:16-alpine
    container_name: rz_db_properties
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: properties
    ports:
      - "5433:5432"
    volumes:
      - db_properties_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  db_auth:
    image: postgres:16-alpine
    container_name: rz_db_auth
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: auth
    ports:
      - "5434:5432"
    volumes:
      - db_auth_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  db_settings:
    image: postgres:16-alpine
    container_name: rz_db_settings
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: settings
    ports:
      - "5435:5432"
    volumes:
      - db_settings_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  db_users:
    image: postgres:16-alpine
    container_name: rz_db_users
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: users
    ports:
      - "5436:5432"
    volumes:
      - db_users_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: rz_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  auth:
    build: ./backend/auth-service
    container_name: rz_auth
    restart: unless-stopped
    depends_on:
      db_auth:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: development
      HOST: "0.0.0.0"
      PORT: 8084
      DATABASE_URL: postgresql://postgres:postgres@db_auth:5432/auth
      REDIS_URL: redis://redis:6379
      CORS_ORIGIN: http://localhost:3001
      JWT_SECRET: ribeirazul-super-secret-jwt-key-change-in-production-please-make-it-stronger-for-auth-service
      JWT_ACCESS_EXPIRY: "4h"
      JWT_REFRESH_EXPIRY: "7d"
      JWT_ISSUER: "ribeirazul-auth-service"
      JWT_AUDIENCE: "ribeirazul-api"
      RATE_LIMIT_MAX: 100
      RATE_LIMIT_WINDOW: "1 minute"
      LOGIN_RATE_LIMIT_MAX: 5
      LOGIN_RATE_LIMIT_WINDOW: "15 minutes"
      MAX_LOGIN_ATTEMPTS: 5
      LOCKOUT_DURATION: 900
      SESSION_TIMEOUT: 86400
      MAX_CONCURRENT_SESSIONS: 5
      TOTP_ISSUER: "Ribeira Azul"
      LOG_LEVEL: info
      SWAGGER_ENABLED: true
      SEED_DEFAULT_ADMIN: true
      DEFAULT_ADMIN_EMAIL: admin@ribeirazul.com
      DEFAULT_ADMIN_PASSWORD: Admin123!
      YARN_IGNORE_PATH: 1
    ports:
      - "8084:8084"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: ["sh", "-c", "npx prisma migrate dev --name init && npx prisma generate && npx prisma db seed || true; npx tsx src/server.ts"]
    volumes:
      - ./backend/auth-service:/app
      - /app/node_modules

  settings:
    build: ./backend/settings-service
    container_name: rz_settings
    restart: unless-stopped
    depends_on:
      db_settings:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: development
      HOST: "0.0.0.0"
      PORT: 8085
      DATABASE_URL: postgresql://postgres:postgres@db_settings:5432/settings
      REDIS_URL: redis://redis:6379
      CORS_ORIGIN: http://localhost:3001
      RATE_LIMIT_MAX: 100
      RATE_LIMIT_WINDOW: "1 minute"
      LOG_LEVEL: info
      SWAGGER_ENABLED: true
      SEED_DEFAULT_SETTINGS: true
      YARN_IGNORE_PATH: 1
    ports:
      - "8085:8085"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/api/v1/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: ["sh", "-c", "npx prisma migrate dev --name init && npx prisma generate && npx prisma db seed || true; npx tsx src/server.ts"]
    volumes:
      - ./backend/settings-service:/app
      - /app/node_modules

  users:
    build: ./backend/user-service
    container_name: rz_users
    restart: unless-stopped
    depends_on:
      db_users:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      NODE_ENV: development
      HOST: "0.0.0.0"
      PORT: 8086
      DATABASE_URL: postgresql://postgres:postgres@db_users:5432/users
      REDIS_URL: redis://redis:6379
      CORS_ORIGIN: http://localhost:3001
      RATE_LIMIT_MAX: 100
      RATE_LIMIT_WINDOW: "1 minute"
      LOG_LEVEL: info
      SWAGGER_ENABLED: true
      SEED_DEFAULT_USERS: true
      YARN_IGNORE_PATH: 1
    ports:
      - "8086:8086"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: ["sh", "-c", "npx prisma migrate dev --name init && npx prisma generate && npx prisma db seed || true; npx tsx src/server.ts"]
    volumes:
      - ./backend/user-service:/app
      - /app/node_modules

  api-gateway:
    build: ./backend/api-gateway
    container_name: rz_api_gateway
    restart: unless-stopped
    depends_on:
      properties:
        condition: service_healthy
      auth:
        condition: service_healthy
      media:
        condition: service_healthy
      settings:
        condition: service_healthy
      users:
        condition: service_healthy
    environment:
      NODE_ENV: development
      PORT: 8081
      HOST: 0.0.0.0
      CORS_ORIGIN: "http://localhost:3001,http://localhost:3000"
      JWT_SECRET: ribeirazul-super-secret-jwt-key-change-in-production-please-make-it-stronger-for-auth-service
      PROPERTIES_SERVICE_URL: http://properties:8082
      PROPERTIES_SERVICE_TIMEOUT: 10000
      MEDIA_SERVICE_URL: http://media:8083
      MEDIA_SERVICE_TIMEOUT: 30000
      AUTH_SERVICE_URL: http://auth:8084
      AUTH_SERVICE_TIMEOUT: 10000
      SETTINGS_SERVICE_URL: http://settings:8085
      SETTINGS_SERVICE_TIMEOUT: 10000
      USERS_SERVICE_URL: http://users:8086
      USERS_SERVICE_TIMEOUT: 10000
      SWAGGER_ENABLED: true
      LOG_LEVEL: info
      ENABLE_DETAILED_LOGGING: true
    ports:
      - "8081:8081"
    # No bind mounts to avoid overriding built dist inside container
    command: ["node", "dist/server.js"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  properties:
    build: ./backend/properties-service
    container_name: rz_properties
    restart: unless-stopped
    depends_on:
      db_properties:
        condition: service_healthy
    environment:
      NODE_ENV: development
      HOST: "0.0.0.0"
      PORT: 8082
      DATABASE_URL: postgresql://postgres:postgres@db_properties:5432/properties
      CORS_ORIGIN: http://localhost:3001
      BASE_URL: http://localhost:8081
      RATE_LIMIT_MAX: 100
      RATE_LIMIT_WINDOW: "1 minute"
      LOG_LEVEL: info
      CACHE_TTL: 300
      JWT_EXPIRY: "24h"
      MAX_PROPERTIES_PER_PAGE: 100
      DEFAULT_PROPERTIES_PER_PAGE: 20
      MAX_PRICE: 100000000
      MAX_PROPERTY_TITLE_LENGTH: 200
      MAX_PROPERTY_DESCRIPTION_LENGTH: 2000
      YARN_IGNORE_PATH: 1
    ports:
      - "5556:8082"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: ["sh", "-c", "mkdir -p /app/uploads/properties/images /app/uploads/properties/thumbnails && chmod -R 755 /app/uploads && npx prisma migrate deploy && node dist/server.js"]
    volumes:
      - ./backend/properties-service:/app
      - /app/node_modules
      - properties_uploads:/app/uploads

  media:
    build: ./backend/media-service
    container_name: rz_media
    restart: unless-stopped
    environment:
      NODE_ENV: development
      HOST: "0.0.0.0"
      PORT: 8083
      CORS_ORIGIN: http://localhost:3001
      LOG_LEVEL: info
      MEDIA_STORAGE_PROVIDER: s3
      S3_REGION: us-east-1
      S3_ENDPOINT: http://minio:9000
      S3_FORCE_PATH_STYLE: "true"
      S3_ACCESS_KEY_ID: minioadmin
      S3_SECRET_ACCESS_KEY: minioadmin
      S3_PUBLIC_URL: http://localhost:9000
      CDN_BASE_URL: ""
    ports:
      - "8083:8083"
    depends_on:
      - minio
    command: ["node", "dist/server.js"]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio:
    image: quay.io/minio/minio:RELEASE.2024-08-17T01-24-54Z
    container_name: rz_minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  minio-setup:
    image: minio/mc:latest
    container_name: rz_minio_setup
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      mc alias set minio http://minio:9000 minioadmin minioadmin;
      mc mb minio/images --ignore-existing;
      mc policy set public minio/images;
      exit 0;
      "

  web:
    build: ./frontend
    container_name: rz_web
    restart: unless-stopped
    environment:
      VITE_API_URL: http://localhost:8081
      NODE_ENV: development
    ports:
      - "3001:3001"
    command: ["corepack", "yarn", "dev", "--host", "--port", "3001"]
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - api-gateway
      - properties
      - auth

volumes:
  db_data:
  db_properties_data:
  db_auth_data:
  db_settings_data:
  db_users_data:
  redis_data:
  minio_data:
  properties_uploads:
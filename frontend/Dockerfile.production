############################
# Stage 1: Dependencies
############################
FROM node:22-alpine AS deps

WORKDIR /app

# Enable corepack for Yarn
RUN corepack enable && corepack prepare yarn@4.9.2 --activate

# Copy package files
COPY package.json yarn.lock* .yarnrc.yml ./

# Install dependencies with cache mount
RUN --mount=type=cache,target=/root/.yarn \
    yarn install --immutable

############################
# Stage 2: Builder
############################
FROM node:22-alpine AS builder

WORKDIR /app

# Enable corepack for Yarn
RUN corepack enable && corepack prepare yarn@4.9.2 --activate

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules
COPY package.json yarn.lock* .yarnrc.yml ./

# Copy source code
COPY . .

# Build arguments for environment variables
ARG VITE_API_URL=https://www.neodras.com
ARG NODE_ENV=production

# Set environment variables for build
ENV VITE_API_URL=$VITE_API_URL
ENV NODE_ENV=$NODE_ENV

# Build the application
RUN yarn build

# Remove source maps for production
RUN find dist -name "*.map" -delete

############################
# Stage 3: Production Runtime
############################
FROM nginx:alpine AS runtime

# Install curl for health checks
RUN apk add --no-cache curl

# Remove default nginx config
RUN rm -rf /etc/nginx/conf.d/*

# Copy custom nginx configuration
COPY nginx-production.conf /etc/nginx/nginx.conf
COPY nginx-site.conf /etc/nginx/conf.d/default.conf

# Copy built application from builder stage
COPY --from=builder /app/dist /usr/share/nginx/html

# Create non-root user for nginx
RUN addgroup -S nginx-group && \
    adduser -S -D -H -h /var/cache/nginx -s /sbin/nologin -G nginx-group -g nginx nginx-user && \
    chown -R nginx-user:nginx-group /usr/share/nginx/html && \
    chown -R nginx-user:nginx-group /var/cache/nginx && \
    chown -R nginx-user:nginx-group /var/log/nginx && \
    touch /var/run/nginx.pid && \
    chown -R nginx-user:nginx-group /var/run/nginx.pid

# Security headers and optimizations (handled in nginx-production.conf)

# Expose port
EXPOSE 80 443

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost/health || exit 1

# Labels for container metadata
LABEL maintainer="Ribeira Azul Development Team"
LABEL version="1.0.0"
LABEL description="Ribeira Azul Frontend Production Build"

# Start nginx
CMD ["nginx", "-g", "daemon off;"]

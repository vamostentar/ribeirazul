############################
# Stage 1: Dependencies
############################
FROM node:22-alpine AS deps

WORKDIR /app

# Enable corepack for Yarn
RUN corepack enable && corepack prepare yarn@4.9.2 --activate

# Copy package files
COPY package.json yarn.lock* .yarnrc.yml ./

# Install dependencies with cache mount
RUN --mount=type=cache,target=/root/.yarn \
    yarn install --immutable

############################
# Stage 2: Builder
############################
FROM node:22-alpine AS builder

WORKDIR /app

# Enable corepack for Yarn
RUN corepack enable && corepack prepare yarn@4.9.2 --activate

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules
COPY package.json yarn.lock* .yarnrc.yml ./

# Copy source code
COPY . .

# Build arguments for environment variables
# Don't set VITE_API_URL in production - let it use relative URLs
ARG VITE_API_URL
ARG NODE_ENV=production

# Set environment variables for build
# Only set VITE_API_URL if explicitly provided, otherwise use relative URLs
ENV VITE_API_URL=$VITE_API_URL
ENV NODE_ENV=$NODE_ENV

# Build the application
RUN yarn build

# Remove source maps for production
RUN find dist -name "*.map" -delete

############################
# Stage 3: Production Runtime
############################
FROM nginx:alpine AS runtime

# Install curl for health checks
RUN apk add --no-cache curl

# Copy nginx configuration
COPY nginx-site.conf /etc/nginx/conf.d/default.conf
COPY nginx-production.conf /etc/nginx/nginx.conf

# Copy built application from builder stage
COPY --from=builder /app/dist /usr/share/nginx/html

# Expose port 80 (Coolify will handle TLS/ports)
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost/health || exit 1

LABEL maintainer="Ribeira Azul Development Team"
LABEL version="1.0.0"
LABEL description="Ribeira Azul Frontend Static Build (served by nginx)"

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
